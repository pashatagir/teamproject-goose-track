{"version":3,"file":"static/js/637.9ce7e8ea.chunk.js","mappings":"ucAOaA,EAAYC,EAAAA,QAAAA,IAAH,sVAWA,YAAsB,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC3B,OAAQD,GACN,IAAK,UACH,OAAOC,EAAMC,OAAOC,QACtB,IAAK,OACH,OAAOF,EAAMC,OAAOE,OAGtB,QACE,MAAO,qBAEZ,IAEmB,YAAsB,IAAnBJ,EAAkB,EAAlBA,KAAkB,EAAZC,MAC3B,OAAQD,GACN,IAAK,UACH,MAAM,OAAN,OAAcK,EAAd,KACF,IAAK,OACH,MAAM,OAAN,O,iyZAAA,kB,60ZAAA,kBAA4CC,EAA5C,KAGF,QACE,MAAM,OAAN,OAAcC,EAAd,KAEL,IAEkB,YAAsB,IAAnBP,EAAkB,EAAlBA,KAAkB,EAAZC,MAC1B,OAAQD,GACN,IAAK,UACH,MAAM,YACR,IAAK,OACH,MAAM,kBACR,IAAK,OACH,MAAM,YACR,QACE,MAAM,YAEX,IAEsB,YAAsB,IAAnBA,EAAkB,EAAlBA,KAAkB,EAAZC,MAC9B,OAAQD,GACN,IAAK,UACH,MAAM,cACR,IAAK,OACH,MAAM,iCACR,IAAK,OACH,MAAM,aACR,QACE,MAAM,aAEX,IAIUQ,EAAOT,EAAAA,QAAAA,EAAH,uJ,mBCnEJU,EAAe,WAC1B,IAAMC,GAAYC,EAAAA,EAAAA,YAAWC,EAAAA,IAAqBF,UAC5CG,GAAOF,EAAAA,EAAAA,YAAWC,EAAAA,IAAqBC,KACvCb,GAAOW,EAAAA,EAAAA,YAAWC,EAAAA,IAAqBZ,KAE7C,GAAIU,EACF,OACE,SAACZ,EAAD,CAAWE,KAAMA,EAAjB,UACE,SAACQ,EAAD,CAAMR,KAAMA,EAAZ,SAAmBa,KAI1B,E,8BCfD,MCkBO,WACL,IAAMC,GAAgBC,EAAAA,EAAAA,IAAYC,EAAAA,IAC5BC,GAAkBF,EAAAA,EAAAA,IAAYG,EAAAA,IAC9BC,GAAgBJ,EAAAA,EAAAA,IAAYK,EAAAA,IAC5BC,GAAkBN,EAAAA,EAAAA,IAAYO,EAAAA,IAC9BC,GAAaR,EAAAA,EAAAA,IAAYS,EAAAA,IACzBC,GAAcC,EAAAA,EAAAA,SAAO,GACrBC,GAAWC,EAAAA,EAAAA,MACX3B,GAAQ4B,EAAAA,EAAAA,MAAiB5B,MAGzB6B,EADuB,CAAChB,EAAeG,EAAiBE,GACfY,MAC7C,SAAAC,GAAM,OAAe,IAAXA,CAAJ,IAUR,OAPAC,EAAAA,EAAAA,YAAU,WACJV,GAAcE,EAAYS,UAC5BT,EAAYS,SAAU,GACtBC,EAAAA,EAAAA,GAAiBR,GAEpB,GAAE,CAACA,EAAUJ,KAGZ,UAAC,IAAD,CAAetB,MAAOA,EAAtB,WACE,SAAC,KAAD,KACA,SAACmC,EAAA,EAAD,CAAQ1B,UAAWoB,KACnB,SAACrB,EAAD,IACCY,IAAmB,SAAC,EAAAgB,UAAD,MAGzB,C","sources":["utils/Notification/Notification.styled.js","utils/Notification/Notification.jsx","utils/Layout/index.js","utils/Layout/Layout.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport gooseFly from 'images/others/notification/goose-fly.png';\nimport gooseOk from 'images/others/notification/goose-ok.png';\nimport bone1 from 'images/others/notification/goose-bone1.png';\nimport bone2 from 'images/others/notification/goose-bone2.png';\nimport gooseHead from 'images/others/notification/goose-head.png';\n\nexport const Container = styled.div`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  width: 320px;\n  min-height: 80px;\n  border-radius: 16px;\n  display: flex;\n  align-items: center;\n  z-index: 999;\n\n  background-color: ${({ type, theme }) => {\n    switch (type) {\n      case 'success':\n        return theme.colors.saccess;\n      case 'fail':\n        return theme.colors.failed;\n      case 'info':\n        return 'rgb(152, 148, 148)';\n      default:\n        return 'rgb(152, 148, 148)';\n    }\n  }};\n\n  background-image: ${({ type, theme }) => {\n    switch (type) {\n      case 'success':\n        return `url(${gooseOk})`;\n      case 'fail':\n        return `url(${bone1}), url(${bone2}), url(${gooseHead})`;\n      case 'info':\n        return `url(${gooseFly})`;\n      default:\n        return `url(${gooseFly})`;\n    }\n  }};\n\n  background-size: ${({ type, theme }) => {\n    switch (type) {\n      case 'success':\n        return `auto 60px`;\n      case 'fail':\n        return `43px, 43px,35px`;\n      case 'info':\n        return `auto 50px`;\n      default:\n        return `auto 40px`;\n    }\n  }};\n\n  background-position: ${({ type, theme }) => {\n    switch (type) {\n      case 'success':\n        return `13px center`;\n      case 'fail':\n        return `25px 33px, 25px 33px, 29px 8px`;\n      case 'info':\n        return `6px center`;\n      default:\n        return `5px center`;\n    }\n  }};\n  background-repeat: no-repeat;\n`;\n\nexport const Text = styled.p`\n  color: white;\n  padding-left: 100px;\n  height: 100%;\n  display: flex;\n  justify-content: start;\n  align-items: center;\n`;\n","import { useContext } from 'react';\n\nimport { Container, Text } from './Notification.styled';\nimport { NotificationContext } from 'helpers/notification';\n\nexport const Notification = () => {\n  const isVisible = useContext(NotificationContext).isVisible;\n  const text = useContext(NotificationContext).text;\n  const type = useContext(NotificationContext).type;\n\n  if (isVisible) {\n    return (\n      <Container type={type}>\n        <Text type={type}>{text}</Text>\n      </Container>\n    );\n  }\n};\n","import { Layout } from './Layout';\n\nexport default Layout;\n","import { useEffect, useRef } from 'react';\nimport { ThemeProvider } from '@emotion/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Outlet } from 'react-router-dom';\n\nimport {\n  selectIsLoggedInUser,\n  selectIsRefreshingUser,\n} from 'redux/auth/selectors';\nimport { selectIsLoading } from 'redux/reviews/selectors';\nimport {\n  selectIsLoadingTasks,\n  selectIsTaskModalOpen,\n} from 'redux/tasks/selectors';\nimport { Loader } from 'utils/Loader';\nimport { Notification } from 'utils/Notification/Notification';\nimport { checkIsTodayBusy } from 'helpers/checkIsTodayBusy';\nimport { useThemeColors } from 'components/User/Header/ThemeToggler/ThemeContext';\nimport { TaskModal } from 'components/User/MainLayout';\n\nexport function Layout() {\n  const isAuthLoading = useSelector(selectIsRefreshingUser);\n  const isReviewLoading = useSelector(selectIsLoading);\n  const isTaskLoading = useSelector(selectIsLoadingTasks);\n  const isTaskModalOpen = useSelector(selectIsTaskModalOpen);\n  const isLoggedIn = useSelector(selectIsLoggedInUser);\n  const firstUpdate = useRef(true);\n  const dispatch = useDispatch();\n  const theme = useThemeColors().theme;\n\n  const loadingStatusesArray = [isAuthLoading, isReviewLoading, isTaskLoading];\n  const isAnythingLoading = loadingStatusesArray.some(\n    status => status === true\n  );\n\n  useEffect(() => {\n    if (isLoggedIn && firstUpdate.current) {\n      firstUpdate.current = false;\n      checkIsTodayBusy(dispatch);\n    }\n  }, [dispatch, isLoggedIn]);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Outlet />\n      <Loader isVisible={isAnythingLoading} />\n      <Notification />\n      {isTaskModalOpen && <TaskModal />}\n    </ThemeProvider>\n  );\n}\n"],"names":["Container","styled","type","theme","colors","saccess","failed","gooseOk","gooseHead","gooseFly","Text","Notification","isVisible","useContext","NotificationContext","text","isAuthLoading","useSelector","selectIsRefreshingUser","isReviewLoading","selectIsLoading","isTaskLoading","selectIsLoadingTasks","isTaskModalOpen","selectIsTaskModalOpen","isLoggedIn","selectIsLoggedInUser","firstUpdate","useRef","dispatch","useDispatch","useThemeColors","isAnythingLoading","some","status","useEffect","current","checkIsTodayBusy","Loader","TaskModal"],"sourceRoot":""}